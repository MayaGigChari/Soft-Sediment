#print(babies)
#print(juveniles)
#print(adults)
#now we can try to make it iterative.
}
projection_with_rand(bloodworm_df_past,0, 0.05)
projection_with_rand<- function(df_past, years_proj,pred) #where pred is the amount of predation by predation_rate
{
#outside for loop:
#need to make a larger array that can fit all of the
#create empty arrays the length of the requested years projected.
#it doesn't seem to work to be updating the rates.
df_past$YEAR<-as.integer(df_past$YEAR)
#babies<-vector(mode = "list", years_proj)
#juveniles <- projected_babies_wrand
#adults <- projected_babies_wrand
#index = length(df_past[,1]) #get the number of babies, juveniles and adults at the last true data year.
#babies[1] = df_past[index,2]
#juveniles[1] = df_past[index,3]
#adults[1] = df_past[index,4]
df_past_initialsize = length(df_past$YEAR)
print(df_past[25,])
df_rates<-rate_generator(df_past,0)
for(k in 0:years_proj) #this will put us at the first index/ value of i as the last row in the df_past dataframe.
{
#print(i + df_past_initialsize)
#maybe instead I can calculate slope of change of adults and estimate birth rates yearly based off this.
i = k+ df_past_initialsize
#print(df_past[i,])
#df_rates<-rate_generator(df_past, k)
#print(df_rates)
adult_birth_rate_mean<- mean(df_rates$Births)
adult_birth_rate_sd<-sd(df_rates$Births)
temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
print(df_past[i,2])
print(temp_rate_births)
new_babies<- round(df_past[i,2]*temp_rate_births,6)# find number of new babies
new_juv = juv_next(df_past[i,4],pred)
new_adult = adult_next(df_past[i,3])
#calculate new babies, juveniles and adults
df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
}
print(df_past)
#df_rates<-rate_generator(df_past)
#print(colnames(df_past))
#adult_birth_rate_mean<- mean(df_rates$Births)
#adult_birth_rate_sd<-sd(df_rates$Births)
#temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
#new_babies<- round(unlist(babies)[1]*temp_rate_births,6)
#have created a value for new babies. Now I need to add the new babies to the list.
#babies[2] = new_babies
#new_juv = juv_next(unlist(babies[1]))
#juveniles[2] = juv_next(unlist(babies[1]))
#adults[2] = adult_next(unlist(juveniles[1]))
#new_adult = adult_next(unlist(juveniles[1]))
#print(df_past$YEAR[length(df_past$YEAR)])
#this is throwing an error because df_past$YEAR is a string.
#df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
#add everything to past dataframe.
#now I need to make this iterative.
#turn the above into + count.
#print(babies)
#print(juveniles)
#print(adult_birth_rate_mean)
#print(adult_birth_rate_sd)
#print(df_rates)
#print(babies)
#print(juveniles)
#print(adults)
#now we can try to make it iterative.
}
projection_with_rand(bloodworm_df_past,0, 0.05)
projection_with_rand<- function(df_past, years_proj,pred) #where pred is the amount of predation by predation_rate
{
#outside for loop:
#need to make a larger array that can fit all of the
#create empty arrays the length of the requested years projected.
#it doesn't seem to work to be updating the rates.
df_past$YEAR<-as.integer(df_past$YEAR)
#babies<-vector(mode = "list", years_proj)
#juveniles <- projected_babies_wrand
#adults <- projected_babies_wrand
#index = length(df_past[,1]) #get the number of babies, juveniles and adults at the last true data year.
#babies[1] = df_past[index,2]
#juveniles[1] = df_past[index,3]
#adults[1] = df_past[index,4]
df_past_initialsize = length(df_past$YEAR)
print(df_past[25,])
#df_rates<-rate_generator(df_past,0)
for(k in 0:years_proj) #this will put us at the first index/ value of i as the last row in the df_past dataframe.
{
#print(i + df_past_initialsize)
#maybe instead I can calculate slope of change of adults and estimate birth rates yearly based off this.
i = k+ df_past_initialsize
#print(df_past[i,])
df_rates<-rate_generator(df_past, k)
#print(df_rates)
adult_birth_rate_mean<- mean(df_rates$Births)
adult_birth_rate_sd<-sd(df_rates$Births)
temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
print(df_past[i,2])
print(temp_rate_births)
new_babies<- round(df_past[i,2]*temp_rate_births,6)# find number of new babies
new_juv = juv_next(df_past[i,4],pred)
new_adult = adult_next(df_past[i,3])
#calculate new babies, juveniles and adults
df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
}
print(df_past)
#df_rates<-rate_generator(df_past)
#print(colnames(df_past))
#adult_birth_rate_mean<- mean(df_rates$Births)
#adult_birth_rate_sd<-sd(df_rates$Births)
#temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
#new_babies<- round(unlist(babies)[1]*temp_rate_births,6)
#have created a value for new babies. Now I need to add the new babies to the list.
#babies[2] = new_babies
#new_juv = juv_next(unlist(babies[1]))
#juveniles[2] = juv_next(unlist(babies[1]))
#adults[2] = adult_next(unlist(juveniles[1]))
#new_adult = adult_next(unlist(juveniles[1]))
#print(df_past$YEAR[length(df_past$YEAR)])
#this is throwing an error because df_past$YEAR is a string.
#df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
#add everything to past dataframe.
#now I need to make this iterative.
#turn the above into + count.
#print(babies)
#print(juveniles)
#print(adult_birth_rate_mean)
#print(adult_birth_rate_sd)
#print(df_rates)
#print(babies)
#print(juveniles)
#print(adults)
#now we can try to make it iterative.
}
projection_with_rand(bloodworm_df_past,5, 0.05)
projection_with_rand(bloodworm_df_past,10, 0.05)
projection_with_rand(bloodworm_df_past,20, 0.05)
projection_with_rand(bloodworm_df_past,50, 0.05)
projection_with_rand(bloodworm_df_past,100, 0.05)
projection_with_rand(bloodworm_df_past,100, 0.10) #this seems to work finally.
projection_with_rand(bloodworm_df_past,100, 0.05) #this seems to work finally.
practice<-projection_with_rand(bloodworm_df_past,100, 0.05) #this seems to work finally.
practice_reshaped <- melt(practice,  id.vars = 'YEAR', variable.name = 'stages')
library(dplyr)
practice_reshaped <- melt(practice,  id.vars = 'YEAR', variable.name = 'stages')
library(reshape2)
practice_reshaped <- melt(practice,  id.vars = 'YEAR', variable.name = 'stages')
practice_reshaped
ggplot(practice_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
projection_with_rand<- function(df_past, years_proj,pred) #where pred is the amount of predation by predation_rate
{
#outside for loop:
#need to make a larger array that can fit all of the
#create empty arrays the length of the requested years projected.
#it doesn't seem to work to be updating the rates.
df_past$YEAR<-as.integer(df_past$YEAR)
df_past_initialsize = length(df_past$YEAR)
print(df_past[25,])
#df_rates<-rate_generator(df_past,0)
for(k in 0:years_proj) #this will put us at the first index/ value of i as the last row in the df_past dataframe.
{
#print(i + df_past_initialsize)
#maybe instead I can calculate slope of change of adults and estimate birth rates yearly based off this.
i = k+ df_past_initialsize
#print(df_past[i,])
df_rates<-rate_generator(df_past, k)
#print(df_rates)
adult_birth_rate_mean<- mean(df_rates$Births)
adult_birth_rate_sd<-sd(df_rates$Births)
temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
#print(df_past[i,2])
#print(temp_rate_births)
new_babies<- round(df_past[i,2]*temp_rate_births,6)# find number of new babies
new_juv = juv_next(df_past[i,4],pred)
new_adult = adult_next(df_past[i,3])
#calculate new babies, juveniles and adults
df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
}
return(df_past)
}
library(reshape2)
practice<-projection_with_rand(bloodworm_df_past,100, 0.05) #this seems to work finally.
practice_reshaped <- melt(practice,  id.vars = 'YEAR', variable.name = 'stages')
ggplot(practice_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
practice<-projection_with_rand(bloodworm_df_past,100, 0.05) #this seems to work finally.
practice_reshaped <- melt(practice,  id.vars = 'YEAR', variable.name = 'stages')
ggplot(practice_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
practice<-projection_with_rand(bloodworm_df_past,100, 0.05) #this seems to work finally.
practice_reshaped <- melt(practice,  id.vars = 'YEAR', variable.name = 'stages')
ggplot(practice_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
projections_wrand_50yrs<- projection_with_rand(bloodworm_df_past,50,0.05)
projections_wrand_100yrs<-projection_with_rand(bloodworm_df_past,100,0.05)
projections_wrand_50yrs<- projection_with_rand(bloodworm_df_past,50,0.05)
projections_wrand_50yrs_reshaped<-melt(projections_wrand_50yrs,id.vars = "YEAR", variable.name = "stages")
projections_wrand_100yrs<-projection_with_rand(bloodworm_df_past,100,0.05)
projections_wrand_100yrs_reshaped<-melt(projections_wrand_100yrs,id.vars = "YEAR", variable.name = "stages")
projections_wrand_50yrs_reshaped
ggplot(projections_wrand_50yrs_reshaped, aes(years_proj_wrand, value)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()+
geom_line(aes(colour = stages ))
ggplot(projections_wrand_50yrs, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(projections_wrand_50yrs, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
projections_wrand_100yrs<-projection_with_rand(bloodworm_df_past,100,0.05)
projections_wrand_100yrs
ggplot(projections_wrand_50yrs, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
projections_wrand_50yrs<- projection_with_rand(bloodworm_df_past,50,0.05)
projections_wrand_50yrs_reshaped<-melt(projections_wrand_50yrs,id.vars = "YEAR", variable.name = "stages")
ggplot(projections_wrand_50yrs, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(practice_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(practice_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2050, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(projections_wrand_50yrs, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
projections_wrand_50yrs
ggplot(projections_wrand_50yrs_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(projections_wrand_50yrs_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2050, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(projections_wrand_50xyrs_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2050, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
ggplot(projections_wrand_100yrs_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
View(projections_wrand_100yrs)
predation_rate = 0.05
#global
efficiency = 0.45
projections_wrand_50yrs<- projection_with_rand(bloodworm_df_past,50,predation_rate)
#call the rate_generator function to populate the arrays
predicted_rates_df<- rate_generator(bloodworm_df_past,baby_to_juv, juv_to_adult, per_capita_birth)
#Name: rate_generator
#Action: takes a dataframe with population values for adult, juvenile and babies
#per year AND 3 empty arrays of 1- the length of the populaiton df, returns a dataframe of rates
#from year to year (first year is 1 year prior to year listed etc. )
#TODO
rate_generator<-function(df_worm, p=0) #array to store per capita births, movement to j and movement to a respectively. e
#added p as an argument. not sure. This will be k from the other function.
#p should by default be set to 0 unless otherwise specified
{
#make 3 arrays.
b_to_j_array<- vector(mode = "list", length(df_worm[,1])-1)
#print(b_to_j_array)
j_to_a_array= b_to_j_array
birth_rate_array = b_to_j_array
index = 1
for(k in 1:(length(df_worm[,1])-1))
{
#print(k) #k will be the index for the past year
r = k +1  #r will be the index for the next year.
temp_baby_to_juv_fun = df_worm[r,3]/df_worm[k,4] #juveniles/babies of past
#print(df_worm[r,3])
#print(df_worm[k,4])
temp_juv_to_adult_fun<- df_worm[r,2]/df_worm[k,3] #adults/juveniles of past year a(t+1) = j(t)*rate, rate = a(t+1)/j(t)
temp_babies_born_fun<-df_worm[r,4]/df_worm[k,2] #babies/adults of past year (for a crude per capita birth rate. )
b_to_j_array[index] = temp_baby_to_juv_fun
j_to_a_array[index] = temp_juv_to_adult_fun
birth_rate_array[index] = temp_babies_born_fun
index = index +1
}
#print(unlist(birth_rate_array))
#print(length(unlist(birth_rate_array)))
#print(length(b_to_j_array))
years = 1976:(1999+p)
df_rate_return<- data.frame(years)
df_rate_return$Births<- unlist(birth_rate_array)
df_rate_return$B_2_J<- unlist(b_to_j_array)
df_rate_return$J_2_A<- unlist(j_to_a_array)
return(df_rate_return)
}
#call the rate_generator function to populate the arrays
predicted_rates_df<- rate_generator(bloodworm_df_past)
predicted_rates_df
#projection model if all rates are averaged from past timeseries data. NO STOCHASTICS.
years_proj<- 2000:2019
projection_df<-data.frame(years_proj)
projected_babies<-vector(mode = "list", 20)
projected_juv <- projected_babies
projected_adults <- projected_babies
projected_babies[1] <-baby_next(bloodworm_df_past$ADULT_EST[24])
projected_juv[1] <-(juv_next(bloodworm_df_past$BABY_EST[24]))
projected_adults[1]<-(adult_next(bloodworm_df_past$JUV_EST[24]))
for(i in 1:19)
{
print(i)
print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]))
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
}
{
print(i)
print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]))
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
}
{
print(i)
print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]))
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
}
#projection model if all rates are averaged from past timeseries data. NO STOCHASTICS.
years_proj<- 2000:2019
projection_df<-data.frame(years_proj)
projected_babies<-vector(mode = "list", 20)
projected_juv <- projected_babies
projected_adults <- projected_babies
projected_babies[1] <-baby_next(bloodworm_df_past$ADULT_EST[24])
projected_juv[1] <-(juv_next(bloodworm_df_past$BABY_EST[24], predation_rate))
projected_adults[1]<-(adult_next(bloodworm_df_past$JUV_EST[24]))
for(i in 1:19)
{
print(i)
print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]))
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
}
projection_df$adults<-unlist(projected_adults)
projection_df$juveniles<-unlist(projected_juv)
#projection model if all rates are averaged from past timeseries data. NO STOCHASTICS.
years_proj<- 2000:2019
projection_df<-data.frame(years_proj)
projected_babies<-vector(mode = "list", 20)
projected_juv <- projected_babies
projected_adults <- projected_babies
projected_babies[1] <-baby_next(bloodworm_df_past$ADULT_EST[24])
projected_juv[1] <-(juv_next(bloodworm_df_past$BABY_EST[24], predation_rate))
projected_adults[1]<-(adult_next(bloodworm_df_past$JUV_EST[24]))
for(i in 1:19)
{
print(i)
print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]), predation_rate)
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
}
projection_df$adults<-unlist(projected_adults)
projection_df$juveniles<-unlist(projected_juv)
projection_df$babies<-unlist(projected_babies)
#print(i)
print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]), predation_rate)
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]), predation_rate)
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
{
#print(i)
#print(baby_next(unlist(projected_adults[i])))
projected_babies[i+1]<-baby_next(unlist(projected_adults[i]))
projected_juv[i+1]<-juv_next(unlist(projected_babies[i]), predation_rate)
projected_adults[i+1]<-adult_next(unlist(projected_juv[i]))
}
projection_df$adults<-unlist(projected_adults)
projection_df$juveniles<-unlist(projected_juv)
projection_df$babies<-unlist(projected_babies)
projection_df = data.frame(projection_df)
projections_reshaped <- melt(projection_df,  id.vars = 'years_proj', variable.name = 'stages')
projections_wrand_50yrs<- projection_with_rand(bloodworm_df_past,50,predation_rate)
projections_wrand_50yrs_reshaped<-melt(projections_wrand_50yrs,id.vars = "YEAR", variable.name = "stages")
projections_wrand_100yrs<-projection_with_rand(bloodworm_df_past,100,predation_rate)
projections_wrand_100yrs_reshaped<-melt(projections_wrand_100yrs,id.vars = "YEAR", variable.name = "stages")
projection_with_rand<- function(df_past, years_proj,pred=0) #where pred is the amount of predation by predation_rate
{
#outside for loop:
#need to make a larger array that can fit all of the
#create empty arrays the length of the requested years projected.
#it doesn't seem to work to be updating the rates.
df_past$YEAR<-as.integer(df_past$YEAR)
df_past_initialsize = length(df_past$YEAR)
print(df_past[25,])
#df_rates<-rate_generator(df_past,0)
for(k in 0:years_proj) #this will put us at the first index/ value of i as the last row in the df_past dataframe.
{
#print(i + df_past_initialsize)
#maybe instead I can calculate slope of change of adults and estimate birth rates yearly based off this.
i = k+ df_past_initialsize
#print(df_past[i,])
df_rates<-rate_generator(df_past, k)
#print(df_rates)
adult_birth_rate_mean<- mean(df_rates$Births)
adult_birth_rate_sd<-sd(df_rates$Births)
temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
#print(df_past[i,2])
#print(temp_rate_births)
new_babies<- round(df_past[i,2]*temp_rate_births,6)# find number of new babies
new_juv = juv_next(df_past[i,4],pred)
new_adult = adult_next(df_past[i,3])
#calculate new babies, juveniles and adults
df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
}
return(df_past)
}
#Name: baby_next_rand
#Action: currently negligible
#TODO: NOT in use currently.
baby_next_rand<- function(df)
{
rate_temp_bab<- rnorm(1, mean=birth_rate_mean, sd=birth_rate_sd)
return(round(adult*rate_temp_bab,6))
}
#Name: juv_next_rand
#Action: currently negligible
#TODO:
juv_next_rand<-function(bab)
{
rate_temp_juv<- rnorm(1, mean=bab_to_juv_mean, sd=bab_to_juv_sd)
return(round(bab*rate_temp_juv,6))
}
#Name: adult_next_rand
#Action: currently negligible
#TODO:
adult_next_rand<-function(juv)
{
rate_temp_ad<- rnorm(1, mean=juv_to_adult_mean, sd=juv_to_adult_sd)
return(round(juv*rate_temp_ad,6))
}
projections_wrand_50yrs<- projection_with_rand(bloodworm_df_past,50,predation_rate)
projections_wrand_50yrs_reshaped<-melt(projections_wrand_50yrs,id.vars = "YEAR", variable.name = "stages")
projections_wrand_100yrs<-projection_with_rand(bloodworm_df_past,100,predation_rate)
projections_wrand_100yrs_reshaped<-melt(projections_wrand_100yrs,id.vars = "YEAR", variable.name = "stages")
projection_with_rand<- function(df_past, years_proj,pred=0) #where pred is the amount of predation by predation_rate
{
#outside for loop:
#need to make a larger array that can fit all of the
#create empty arrays the length of the requested years projected.
#it doesn't seem to work to be updating the rates.
df_past$YEAR<-as.integer(df_past$YEAR)
df_past_initialsize = length(df_past$YEAR)
#print(df_past[25,])
#df_rates<-rate_generator(df_past,0)
for(k in 0:years_proj) #this will put us at the first index/ value of i as the last row in the df_past dataframe.
{
#print(i + df_past_initialsize)
#maybe instead I can calculate slope of change of adults and estimate birth rates yearly based off this.
i = k+ df_past_initialsize
#print(df_past[i,])
df_rates<-rate_generator(df_past, k)
#print(df_rates)
adult_birth_rate_mean<- mean(df_rates$Births)
adult_birth_rate_sd<-sd(df_rates$Births)
temp_rate_births<- rnorm(1, mean=adult_birth_rate_mean, sd=adult_birth_rate_sd)
#print(df_past[i,2])
#print(temp_rate_births)
new_babies<- round(df_past[i,2]*temp_rate_births,6)# find number of new babies
new_juv = juv_next(df_past[i,4],pred)
new_adult = adult_next(df_past[i,3])
#calculate new babies, juveniles and adults
df_past<- df_past %>% add_row(YEAR = df_past$YEAR[length(df_past$YEAR)]+1, ADULT_EST = new_adult, JUV_EST = new_juv, BABY_EST = new_babies)
#print(df_past)
}
return(df_past)
}
ggplot(projections_wrand_100yrs_reshaped, aes(YEAR, value, group = stages)) +
geom_line(aes(colour = stages )) + scale_x_discrete(breaks = seq(1950, 2100, by = 5)) + labs(x = "Year", y = "worms (millions lbs)")+theme_bw()
#estimate the yearly adult bloodworm population from harvest from 1975-2000, store in bloodworm_yearly_bulk_true
bloodworm_yearly_bulk<- as.double(bloodworm_DMR_1975.2000$`POUNDS(millions)`)
bloodworm_yearly_bulk_true<-unlist(lapply(bloodworm_yearly_bulk, correctPop))
bloodworm_DMR_1975.2000$"ADULT_EST"<- unlist(bloodworm_yearly_bulk_true)
#estimate yearly juvenile bloodworm pop harvest from 1975-2000
bloodworm_juv_est<- lapply(bloodworm_DMR_1975.2000$ADULT_EST, juvenilesEst )
bloodworm_juv_est<-as.double(bloodworm_juv_est)
bloodworm_DMR_1975.2000$"JUV_EST"<- unlist(bloodworm_juv_est)
View(df_current_blood_reshaped)
#first we need the "true" estimated data for the adult worm populations from 2000-2020.
bloodworm_DMR_data_current
bloodworm_DMR_data_current
#first we need the "true" estimated data for the adult worm populations from 2000-2020.
bloodworm_DMR_data_current<- bloodworm_DMR_data[which(bloodworm_DMR_data$YEAR >=2000 & bloodworm_DMR_data$YEAR <2020),]
Years_current<-bloodworm_DMR_data_current$YEAR
df_corrected_bloodworm_current<- data.frame(Years_current)
bloodworm_yearly_bulk_current<- as.double(bloodworm_DMR_data_current$`POUNDS(millions)`)
#this dataframe consists of a timeseries of estimated millions of lbs of worms.
df_corrected_bloodworm_current$ADULTS<-unlist(lapply(bloodworm_yearly_bulk_current, correctPop))
df_corrected_bloodworm_current = data.frame(df_corrected_bloodworm_current)
#this dataset is a melted version of df_corrected_bloodworm_current for plotting.
df_current_blood_reshaped <- melt(df_corrected_bloodworm_current,  id.vars = 'Years_current', variable.name = 'stages')
library(reshape2)
#this dataset is a melted version of df_corrected_bloodworm_current for plotting.
df_current_blood_reshaped <- melt(df_corrected_bloodworm_current,  id.vars = 'Years_current', variable.name = 'stages')
df_current_blood_reshaped
#first we need the "true" estimated data for the adult worm populations from 2000-2020.
bloodworm_DMR_data_current<- bloodworm_DMR_data[which(bloodworm_DMR_data$YEAR >=2000 & bloodworm_DMR_data$YEAR <2021),]
Years_current<-bloodworm_DMR_data_current$YEAR
df_corrected_bloodworm_current<- data.frame(Years_current)
bloodworm_yearly_bulk_current<- as.double(bloodworm_DMR_data_current$`POUNDS(millions)`)
#this dataframe consists of a timeseries of estimated millions of lbs of worms.
df_corrected_bloodworm_current$ADULTS<-unlist(lapply(bloodworm_yearly_bulk_current, correctPop))
df_corrected_bloodworm_current = data.frame(df_corrected_bloodworm_current)
#this dataset is a melted version of df_corrected_bloodworm_current for plotting.
df_current_blood_reshaped <- melt(df_corrected_bloodworm_current,  id.vars = 'Years_current', variable.name = 'stages')
df_current_blood_reshaped
